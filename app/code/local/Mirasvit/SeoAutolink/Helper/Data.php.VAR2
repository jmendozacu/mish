<?php
class Mirasvit_SeoAutolink_Helper_Data extends Mage_Core_Helper_Abstract
{
	private $links;

	public function getLinks($text) {
		Varien_Profiler::start('seoautolink_getLinks');
		$links = Mage::getModel('seoautolink/link')->getCollection()
					->addActiveFilter()
					->addStoreFilter(Mage::app()->getStore())
					;

		$linkKeyword = array();
		foreach ($links  as $link) {
			$linkKeyword[] = $link->getKeyword();
		}

		$linkKeywordInText = false;

		foreach ($linkKeyword as $keywordValue) {
			if (preg_match("/$keywordValue/ui", $text)) {
     			$linkKeywordInText = true;
     			break;
			}
		}


		$links->getSelect()
			->order( array('LENGTH(main_table.keyword) desc') ); //we need to replace long keywords firstly
		Varien_Profiler::stop('seoautolink_getLinks');
		if ($linkKeywordInText == true) {
			return $links;
		} else {
			return false;
		}
	}

	public function addLinks($text) {
		if (strpos(Mage::helper('core/url')->getCurrentUrl(), '/checkout/onepage/')) {
            return $text;
        }

		return $this->_addLinks($text, $this->getLinks($text));
	}

	public function _addLinks($text, $links) {
		if (!$links) {
			return $text;
		}
		Varien_Profiler::start('seoautolink_addLinks');
		foreach ($links  as $link) {
			$replaceKeyword = $link->getKeyword();
			if (!preg_match("/$replaceKeyword/ui", $text)) {
				continue;
			}

			$nofollow = $link->getIsNofollow()?'rel=\'nofollow\'':'';

			$target = $link->getUrlTarget()?" target='{$link->getUrlTarget()}' ":"";
			$html = "<a href='{$link->getUrl()}'$target $nofollow>{$link->getKeyword()}</a>";//-----> нам нужно, чтоб в дальнешем подменить ключевое слово, на это же слово с правильным регистром


            $replaceKeywordUcFirst = $this->mbUcfirst($replaceKeyword);


			$htmlUcFirst = "<a href='{$link->getUrl()}'$target $nofollow>{$replaceKeywordUcFirst}</a>";
			$keyword = $link->getKeyword();
			$maxReplacements = -1;
			if ($link->getMaxReplacements() > 0) {
				$maxReplacements = $link->getMaxReplacements();
			}
			$direction = 0;
			switch ($link->getOccurence()){
				case Mirasvit_SeoAutolink_Model_Config_Source_Occurence::FIRST:
					$direction = 0;
					break;
				case Mirasvit_SeoAutolink_Model_Config_Source_Occurence::LAST:
					$direction = 1;
					break;
				case Mirasvit_SeoAutolink_Model_Config_Source_Occurence::RANDOM:
					$direction = rand(0,1);
					break;
			}

			$text = $this->replace($keyword, $html, $text, $maxReplacements, $replaceKeyword, $htmlUcFirst, $replaceKeywordUcFirst, $direction);

		}
   		Varien_Profiler::stop('seoautolink_addLinks');
		return $text;
	}
	//replace words and left the same cases
	protected function replace($find, $replace, $source, $maxReplacements, $replaceKeyword = false, $replaceUcFirst = false, $replaceKeywordFirstLet = false, $direct = false) {
		// substitute some special html characters with their 'real' value

		$searchT = array('&Eacute;',
		                  '&Euml;',
		                  '&Oacute;',
		                  '&eacute;',
		                  '&euml;',
		                  '&oacute;',
		                  '&Agrave;',
		                  '&Egrave;',
		                  '&Igrave;',
		                  '&Iacute;',
		                  '&Iuml;',
		                  '&Ograve;',
		                  '&Ugrave;',
		                  '&agrave;',
		                  '&egrave;',
		                  '&igrave;',
		                  '&iacute;',
		                  '&iuml;',
		                  '&ograve;',
		                  '&ugrave;',
		                  '&Ccedil;',
		                  '&ccedil;'
		                 );
		$replaceT = array('É',
		                   'Ë',
		                   'Ó',
		                   'é',
		                   'ë',
		                   'ó',
		                   'À',
		                   'È',
		                   'Ì',
		                   'Í',
		                   'Ï',
		                   'Ò',
		                   'Ù',
		                   'à',
		                   'è',
		                   'ì',
		                   'í',
		                   'ï',
		                   'ò',
		                   'ù',
		                   'Ç',
		                   'ç'
		                  );

		$source = $this->str_replace($searchT, $replaceT, $source);



		  // matches for these expressions will be replaced with a unique placeholder
		$preg_patterns = array(
		      '#<!--.*?-->#s'       // html comments
		    , '#<a[^>]*>.*?</a>#si' // html links
		    , '#<[^>]+>#'           // generic html tag
		    //~ , '#&[^;]+;#'           // special html characters
		    //~ , '#[^ÉËÓéëóÀÈÌÍÏÒÙàèìíïòùÇç\w\s]+#'   // all non alfanumeric characters, spaces and some special characters
		);


		$pl = new Mirasvit_TextPlaceholder($source, $preg_patterns);
		// raw text, void of any html.

		$source = $pl->get_tokenized_text();

		if ($direct == 1) {
				$source = strrev($source);
				$replaceKeyword = strrev($replaceKeyword);
				$replace = strrev($replace);
				$replaceUcFirst = strrev($replaceUcFirst);
				$replaceKeywordFirstLet = strrev($replaceKeywordFirstLet);
		}

		$explodeSource = explode($replaceKeyword, $source); // explode text
		$nextSymbol= array('',' ', ',', '.', '!', '?', "\n", "\r", "\r\n");	// symbols after the word
		$prevSymbol= array(' ', "\n", "\r", "\r\n"); // symbols before the word

	    if ($maxReplacements == -1) {
	    	// replace all links with the first letter in uppercase
			foreach ($explodeSource as $keyExplode => $valExplode) {
				if (count(explode($replaceKeywordFirstLet, $valExplode)) > 1) {
					$explodeSourceTemporary = array();
					$explodeSourceTemporary = explode($replaceKeywordFirstLet, $valExplode);
					$countExplodeSourceTemporary = count($explodeSourceTemporary);
					$flag = 0;
					foreach ($explodeSourceTemporary as $keyTemporary => $valueTemporary) {
						$flag++;
						if (($countExplodeSourceTemporary != $flag)
							&& ($direct == 0)
							&& (((!empty($explodeSourceTemporary[$keyTemporary + 1][0]))
								&& (in_array($explodeSourceTemporary[$keyTemporary + 1][0], $nextSymbol)))
									|| (empty($explodeSourceTemporary[$keyTemporary + 1][0])))
							&& ((empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1]))
								|| ((!empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1]))
									&& (in_array($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1], $prevSymbol))))) {
										$explodeSourceTemporary[$keyTemporary] = $valueTemporary . $replaceUcFirst;
						} elseif (($countExplodeSourceTemporary != $flag)
							&& ($direct == 1)
							&& (((!empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1]))
								&& (in_array($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1], $nextSymbol)))
									|| (empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1])))
							&& ((empty($explodeSourceTemporary[$keyTemporary + 1][0]))
								|| ((!empty($explodeSourceTemporary[$keyTemporary + 1][0]))
									&& (in_array($explodeSourceTemporary[$keyTemporary + 1][0], $prevSymbol))))) {
										$explodeSourceTemporary[$keyTemporary] = $valueTemporary . $replaceUcFirst;
						} elseif ($countExplodeSourceTemporary != $flag) {
									$explodeSourceTemporary[$keyTemporary] = $valueTemporary . $replaceKeywordFirstLet;
						} else {
							$explodeSourceTemporary[$keyTemporary] = $valueTemporary;
						}
					}
					$explodeSource[$keyExplode] = implode("", $explodeSourceTemporary);
					unset($explodeSourceTemporary);
				} else {
					$explodeSource[$keyExplode] = $valExplode;
				}
			}
		}



		$sizeExplodeSource = count($explodeSource);
		$size = 0;
		$prepareSourse = '';
		$sizeExplode = 0;
		foreach ($explodeSource as $keySource => $valSource) {
			$size++;
			if ($maxReplacements == -1) {
				// replace all links with written letters
				if (($size < $sizeExplodeSource)
					&& ($direct == 0)
					&& (((!empty($explodeSource[$keySource + 1][0]))
						&& (in_array($explodeSource[$keySource + 1][0], $nextSymbol)))
							|| (empty($explodeSource[$keySource + 1][0])))
					&& ((empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1]))
						|| ((!empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1]))
							&& (in_array($explodeSource[$keySource][strlen($explodeSource[$keySource])-1], $prevSymbol))))) {
								$prepareSourse .= $valSource . $replace;
				} elseif (($size < $sizeExplodeSource)
				  	&& ($direct == 1)
				  	&& (((!empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1]))
				  		&& (in_array($explodeSource[$keySource][strlen($explodeSource[$keySource])-1], $nextSymbol)))
				  			|| (empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1])))
				  	&& ((empty($explodeSource[$keySource + 1][0]))
				  		|| ((!empty($explodeSource[$keySource + 1][0]))
							&& (in_array($explodeSource[$keySource + 1][0], $prevSymbol))))) {
								$prepareSourse .= $valSource . $replace;
				} elseif ($size < $sizeExplodeSource) {
					$prepareSourse .= $valSource . $replaceKeyword;
				} else {
					$prepareSourse .= $valSource;
				}
			} else {

				// maxReplacements with the first letter in uppercase
				if (count(explode($replaceKeywordFirstLet, $valSource)) > 1) {
					$explodeSourceTemporary = array();
					$explodeSourceTemporary = explode($replaceKeywordFirstLet, $valSource);
					$countExplodeSourceTemporary = count($explodeSourceTemporary);

					$flag = 0;
					foreach ($explodeSourceTemporary as $keyTemporary => $valueTemporary) {
						$flag++;
						if (($countExplodeSourceTemporary != $flag)
							&& ($direct == 0)
							&& (((!empty($explodeSourceTemporary[$keyTemporary + 1][0]))
								&& (in_array($explodeSourceTemporary[$keyTemporary + 1][0], $nextSymbol)))
									|| (empty($explodeSourceTemporary[$keyTemporary + 1][0])))
							&& ((empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1]))
								|| ((!empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1]))
									&& (in_array($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1], $prevSymbol))))
							&& ($sizeExplode < $maxReplacements)) {
								$explodeSourceTemporary[$keyTemporary] = $valueTemporary . $replaceUcFirst;
								$sizeExplode++;
						} elseif (($countExplodeSourceTemporary != $flag)
							&& ($direct == 1)
							&& (((!empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1]))
								&& (in_array($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1], $nextSymbol)))
									|| (empty($explodeSourceTemporary[$keyTemporary][strlen($explodeSourceTemporary[$keyTemporary])-1])))
							&& ((empty($explodeSourceTemporary[$keyTemporary + 1][0]))
								|| ((!empty($explodeSourceTemporary[$keyTemporary + 1][0]))
									&& (in_array($explodeSourceTemporary[$keyTemporary + 1][0], $prevSymbol))))
							&& ($sizeExplode < $maxReplacements)) {
								$explodeSourceTemporary[$keyTemporary] = $valueTemporary . $replaceUcFirst;
								$sizeExplode++;
						} elseif ($countExplodeSourceTemporary != $flag) {
									$explodeSourceTemporary[$keyTemporary] = $valueTemporary . $replaceKeywordFirstLet;
						} else {
							$explodeSourceTemporary[$keyTemporary] = $valueTemporary;
						}
					}
					$valSource = implode("", $explodeSourceTemporary);
					unset($explodeSourceTemporary);
				}

				// maxReplacements for written letters
				if (($size < $sizeExplodeSource)
					&& ($direct == 0)
					&& (((!empty($explodeSource[$keySource + 1][0]))
						&& (in_array($explodeSource[$keySource + 1][0], $nextSymbol)))
							|| (empty($explodeSource[$keySource + 1][0])))
					&& ((empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1]))
						|| ((!empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1]))
							&& (in_array($explodeSource[$keySource][strlen($explodeSource[$keySource])-1], $prevSymbol))))
					&& ($sizeExplode < $maxReplacements)) {
						$prepareSourse .= $valSource . $replace;
						$sizeExplode++;
				} elseif (($size < $sizeExplodeSource)
				  	&& ($direct == 1)
				  	&& (((!empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1]))
				  		&& (in_array($explodeSource[$keySource][strlen($explodeSource[$keySource])-1], $nextSymbol)))
				  			|| (empty($explodeSource[$keySource][strlen($explodeSource[$keySource])-1])))
				  	&& ((empty($explodeSource[$keySource + 1][0]))
				  		|| ((!empty($explodeSource[$keySource + 1][0]))
							&& (in_array($explodeSource[$keySource + 1][0], $prevSymbol))))
				  	&& ($sizeExplode < $maxReplacements)) {
						$prepareSourse .= $valSource . $replace;
						$sizeExplode++;
				} elseif ($size < $sizeExplodeSource) {
					$prepareSourse .= $valSource . $replaceKeyword;
				} else {
					$prepareSourse .= $valSource;
				}
			}
		}

		if ($direct == 1) {
				$prepareSourse = strrev($prepareSourse);
		}

		$source = $prepareSourse;



		// we will later need this to put the html we stripped out, back in.
		$translation_table = $pl->get_translation_table();
		// reconstruct the original text (now with links)
		foreach ($translation_table as $key=>$value)
		{
			$source = $this->str_replace($key, $value, $source);
		}
		// replace the special html characters
		$source = $this->str_replace($replaceT, $searchT, $source);



		return $source;
	}

	/* First letter uppercase (using UTF-8)*/
	public function mbUcfirst($str, $encoding='UTF-8')
    {
        $str = mb_ereg_replace('^[\ ]+', '', $str);
        $str = mb_strtoupper(mb_substr($str, 0, 1, $encoding), $encoding).
               mb_substr($str, 1, mb_strlen($str), $encoding);
        return $str;
    }

	/*
	* analog of ctype_alnum, but with support of Cyrillic
	*/
	public function is_alnum($string) {
		return (bool)preg_match("/^[a-zA-Z\p{Cyrillic}0-9]+$/u", $string);
	}

	public function strlen($string) {
		return Mage::helper('core/string')->strlen($string);
	}

	public function substr($string, $offset, $length = null) {
		return Mage::helper('core/string')->substr($string, $offset, $length);
	}

	public function substr_replace($output, $replace, $posOpen, $posClose) {
        return substr_replace($output, $replace, $posOpen, $posClose);
    }

    public function stripos($source, $find, $pos = null) {
		if (extension_loaded('mbstring')) {
			$pos = Mage::helper('core/string')->strpos(mb_convert_case($source, MB_CASE_LOWER, "UTF-8"),  mb_convert_case($find, MB_CASE_LOWER, "UTF-8"), $pos);
		} else {
			$pos = stripos($source, $find, $pos);
		}
    	return $pos;
    }

    public function get_char($source, $pos) {
    	if ($pos < 0 || $pos >= $this->strlen($source)) {
    		return false;
    	}
    	return $this->substr($source, $pos, 1);
    }

    public function str_replace($search, $replace, $source) {
    	return str_replace($search, $replace, $source);
    }

    public function strrev($string) {
    	return Mage::helper('core/string')->strrev($string);
    }
}

class Mirasvit_TextPlaceholder {

    var $_translation_table = array();

    function __construct($text, $patterns) {
        $this->_tokenized_text = preg_replace_callback($patterns, array($this, 'placeholder'), $text);
    }

    function get_translation_table() {
        return $this->_translation_table;
    }

    function get_tokenized_text() {
        return $this->_tokenized_text;
    }

    function placeholder($matches) {
        $sequence = count($this->_translation_table);
        $placeholder = ' xkjndsfkjnakcx' . $sequence . 'cxmkmweof329jc ';
        $this->_translation_table[$placeholder] = $matches[0];
        return $placeholder;
    }

}